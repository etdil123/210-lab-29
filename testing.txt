Unit Testing

For this program, I would use unit testing to test the function that simulates the games
and stores the corresponding data into that teams map and list 
- the unit test would make sure that the data is stored for the right team
- unit teast would make sure the randomization of numbers for stats is also correct
- there would be an output statement to display that the correct data is showing - the function returns void so it's important that the output statment is included 

See below for Testing the simulation function:
It is a function but the driver portion happens after the simulateGame function has been called
- it is a test of the simulateGame function

void check_stats(map<string, array<list<int>, 3> > &teamStats, const string &teamName) {
    for (auto & pair : teamStats) {
        // call the function to input stats for one game for the team
        simulateGame(teamStats, pair.first);
        // Access the last element of each list for points, rebounds, and assists
        int lastPoints = teamStats.at(teamName)[0].back();
        int lastRebounds = teamStats.at(teamName)[1].back();
        int lastAssists = teamStats.at(teamName)[2].back();

        cout << "Team Added: " << teamName << endl;
        cout << "Points: " << lastPoints << endl;
        cout << "Rebounds: " << lastRebounds << endl;
        cout << "Assists: " << lastAssists << endl;
    }
}